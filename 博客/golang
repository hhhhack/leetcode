/*
 * 
 * 　　┏┓　　　┏┓+ +
 * 　┏┛┻━━━┛┻┓ + +
 * 　┃　　　　　　　┃ 　
 * 　┃　　　━　　　┃ ++ + + +
 *  ████━████ ┃+
 * 　┃　　　　　　　┃ +
 * 　┃　　　┻　　　┃
 * 　┃　　　　　　　┃ + +
 * 　┗━┓　　　┏━┛
 * 　　　┃　　　┃　　　　　　　　　　　
 * 　　　┃　　　┃ + + + +
 * 　　　┃　　　┃
 * 　　　┃　　　┃ +  神兽保佑
 * 　　　┃　　　┃    代码无bug　　
 * 　　　┃　　　┃　　+　　　　　　　　　
 * 　　　┃　 　　┗━━━┓ + +
 * 　　　┃ 　　　　　　　┣┓
 * 　　　┃ 　　　　　　　┏┛
 * 　　　┗┓┓┏━┳┓┏┛ + + + +
 * 　　　　┃┫┫　┃┫┫
 * 　　　　┗┻┛　┗┻┛+ + + +
 * 
 * 
 * @Author: hhhhack
 * @Date: 2021-01-08 10:48:31
 * @LastEditTime: 2021-01-19 20:36:35
 * @LastEditors: hhhhack
 * @Description: 
 * @FilePath: /code/leetcode/博客/golang
 * @
 */

指针：
    1.不可偏移，运算
    2.new创建基础类型的指针，bool，string，int
    3.make针对切片，chan，map，输出对应类型而非指针
    4.chan, map, sclip是引用类型，需要make分配空间

并发:
go最大特点并发(包括实现和调度，原生支持并行)简单
    1.go 关键字启动协程
    2.sync.WaitGroup同步协程(Add(), Done(), Wait())
    3.GPM
        G:goroutine
        P:协程管理器，调度着一组协程
        M:实际运行着的线程，每个协程实际试绑定到M上执行
        G阻塞时对应P会新建M，再把其余G移到新M上
    4.可增长栈，消耗少，调度简单快捷

    channel:
        1.定义:var value chan valueType
        2.操作:send ch<-value, rcv value<-ch, close close(ch),向nil发送和读取会阻塞,向满的ch发送和空的ch读取会阻塞
        3.关闭通道的发送和关闭会引发panic,读取会读取剩余值,没有剩余值会获取零值
        4.无缓存ch:读时等同于空的有缓存ch,写时等于满的有缓存ch
        5.有缓存ch:
        6.单向ch:
    锁:
        1.sync包Mutex, RWMutex
        2.sync.Once包裹的函数只执行一次
        3.sync.map并发安全的
        4.atomic包,原子操作

gc:垃圾回收机制
    1.常见方式：计数法，标记法，分代回收，
    golang机制:三色回收法
        1.所有内存为白色                                                 |   
        2.从初始内存开始扫描,所有可达的内存标为灰色                         | 和业务进程同步
        3.然后对灰色节点扫描,灰色节点改为黑色,扫描到的改为灰色,              |
        4.重新扫描写屏障                                                |stw
        4.最后清楚白色节点
        写屏障:检测所有读写操作,有写操作或者新建操作就把内存染成灰色
    问题:大量新建的小内存会导致性能下降