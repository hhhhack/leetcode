/*
 * 
 * 　　┏┓　　　┏┓+ +
 * 　┏┛┻━━━┛┻┓ + +
 * 　┃　　　　　　　┃ 　
 * 　┃　　　━　　　┃ ++ + + +
 *  ████━████ ┃+
 * 　┃　　　　　　　┃ +
 * 　┃　　　┻　　　┃
 * 　┃　　　　　　　┃ + +
 * 　┗━┓　　　┏━┛
 * 　　　┃　　　┃　　　　　　　　　　　
 * 　　　┃　　　┃ + + + +
 * 　　　┃　　　┃
 * 　　　┃　　　┃ +  神兽保佑
 * 　　　┃　　　┃    代码无bug　　
 * 　　　┃　　　┃　　+　　　　　　　　　
 * 　　　┃　 　　┗━━━┓ + +
 * 　　　┃ 　　　　　　　┣┓
 * 　　　┃ 　　　　　　　┏┛
 * 　　　┗┓┓┏━┳┓┏┛ + + + +
 * 　　　　┃┫┫　┃┫┫
 * 　　　　┗┻┛　┗┻┛+ + + +
 * 
 * 
 * @Author: hhhhack
 * @Date: 2020-12-29 09:35:30
 * @LastEditTime: 2020-12-29 17:38:37
 * @LastEditors: hhhhack
 * @Description: 
 * @FilePath: /code/leetcode/博客/安全编码
 * @
 */
sql注入
    直接或间接将外部输入拼接到sql语句，导致结果在某种程度上被用户修改

    预防方式：
    1.禁止拼接任何未过滤/校验的外部输入
        1)参数化查询&预编译
        2)字符白名单
        3)枚举白名单变量
        4)正则表达式过滤(要注意REDOS攻击)

xss
    用户可控数据输出到前端时未作过滤、转义处理，导致html模板和用户数据混淆，用户可以插入恶意参数修改html模板，插入js语句，修改属性，导致用户信息泄露，网页劫持，用户计算机被攻击

    预防方式：
    1.外部可控的输入输出到前端要做转义和过滤
        1)显式开启框架的自动转义功能，同时确认转义功能符合需求，覆盖所有类型的输出
        2)后端渲染转成前端渲染
        3)模板和数据分开渲染
        4)针对不同的输出点做不同的转换规则
        5)正确设置content-type

csrf(跨站请求伪造)
    用户A登录网站B，同时在未登出时用同浏览器访问危险网站C，网站C获取用户A的信息，网站C伪造A访问B
    预防方式：
    1.增删改请求应有防护跨站伪造请求的机制
        1)后台生成一个随机且有时限的token，token可以通过设置头部传输给前端，或者前端在请求前先请求token，客户端请求的时候需要携带token，后端会校验token
            1.token需要通过不可预测的安全随机数生成
            2.长度24字节以上
            3.token需要有时限
            4.不能只校验cookie里的token值

命令注入

任意文件

crlf注入